/* tslint:disable */
/* eslint-disable */
/**
 * 우리아파트 API 문서
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  CommonResponseBodyOneVoteDto,
  CommonResponseBodyOneVoteDtoFromJSON,
  CommonResponseBodyOneVoteDtoToJSON,
  CommonResponseBodyVoid,
  CommonResponseBodyVoidFromJSON,
  CommonResponseBodyVoidToJSON,
  VoteContentDto,
  VoteContentDtoFromJSON,
  VoteContentDtoToJSON,
} from "../models";

export interface CancelVotingUsingDELETERequest {
  itemId: string;
}

export interface GetRandomPinnedVoteOfApartmentUsingGETRequest {
  apartmentId: string;
}

export interface GetVoteByIdUsingGETRequest {
  voteId: string;
}

export interface SubmitVotingUsingPOSTRequest {
  itemId: string;
}

export interface WriteNewVoteUsingPOSTRequest {
  voteContent: VoteContentDto;
}

/**
 *
 */
export class Class42Api extends runtime.BaseAPI {
  /**
   * 투표 취소하기
   */
  async cancelVotingUsingDELETERaw(
    requestParameters: CancelVotingUsingDELETERequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<CommonResponseBodyVoid>> {
    if (
      requestParameters.itemId === null ||
      requestParameters.itemId === undefined
    ) {
      throw new runtime.RequiredError(
        "itemId",
        "Required parameter requestParameters.itemId was null or undefined when calling cancelVotingUsingDELETE."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // KarrotAccessToken authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/vote/item/{itemId}/voting`.replace(
          `{${"itemId"}}`,
          encodeURIComponent(String(requestParameters.itemId))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CommonResponseBodyVoidFromJSON(jsonValue)
    );
  }

  /**
   * 투표 취소하기
   */
  async cancelVotingUsingDELETE(
    requestParameters: CancelVotingUsingDELETERequest,
    initOverrides?: RequestInit
  ): Promise<CommonResponseBodyVoid> {
    const response = await this.cancelVotingUsingDELETERaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * 사용자에게 보여질 핀 질문 랜덤 조회
   */
  async getRandomPinnedVoteOfApartmentUsingGETRaw(
    requestParameters: GetRandomPinnedVoteOfApartmentUsingGETRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<CommonResponseBodyOneVoteDto>> {
    if (
      requestParameters.apartmentId === null ||
      requestParameters.apartmentId === undefined
    ) {
      throw new runtime.RequiredError(
        "apartmentId",
        "Required parameter requestParameters.apartmentId was null or undefined when calling getRandomPinnedVoteOfApartmentUsingGET."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // KarrotAccessToken authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/apartment/{apartmentId}/vote/pinned`.replace(
          `{${"apartmentId"}}`,
          encodeURIComponent(String(requestParameters.apartmentId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CommonResponseBodyOneVoteDtoFromJSON(jsonValue)
    );
  }

  /**
   * 사용자에게 보여질 핀 질문 랜덤 조회
   */
  async getRandomPinnedVoteOfApartmentUsingGET(
    requestParameters: GetRandomPinnedVoteOfApartmentUsingGETRequest,
    initOverrides?: RequestInit
  ): Promise<CommonResponseBodyOneVoteDto> {
    const response = await this.getRandomPinnedVoteOfApartmentUsingGETRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * ID로 투표 게시글 조회
   */
  async getVoteByIdUsingGETRaw(
    requestParameters: GetVoteByIdUsingGETRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<CommonResponseBodyOneVoteDto>> {
    if (
      requestParameters.voteId === null ||
      requestParameters.voteId === undefined
    ) {
      throw new runtime.RequiredError(
        "voteId",
        "Required parameter requestParameters.voteId was null or undefined when calling getVoteByIdUsingGET."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // KarrotAccessToken authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/vote/{voteId}`.replace(
          `{${"voteId"}}`,
          encodeURIComponent(String(requestParameters.voteId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CommonResponseBodyOneVoteDtoFromJSON(jsonValue)
    );
  }

  /**
   * ID로 투표 게시글 조회
   */
  async getVoteByIdUsingGET(
    requestParameters: GetVoteByIdUsingGETRequest,
    initOverrides?: RequestInit
  ): Promise<CommonResponseBodyOneVoteDto> {
    const response = await this.getVoteByIdUsingGETRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * 투표 (정정) 하기
   */
  async submitVotingUsingPOSTRaw(
    requestParameters: SubmitVotingUsingPOSTRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<CommonResponseBodyVoid>> {
    if (
      requestParameters.itemId === null ||
      requestParameters.itemId === undefined
    ) {
      throw new runtime.RequiredError(
        "itemId",
        "Required parameter requestParameters.itemId was null or undefined when calling submitVotingUsingPOST."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // KarrotAccessToken authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/vote/item/{itemId}/voting`.replace(
          `{${"itemId"}}`,
          encodeURIComponent(String(requestParameters.itemId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CommonResponseBodyVoidFromJSON(jsonValue)
    );
  }

  /**
   * 투표 (정정) 하기
   */
  async submitVotingUsingPOST(
    requestParameters: SubmitVotingUsingPOSTRequest,
    initOverrides?: RequestInit
  ): Promise<CommonResponseBodyVoid> {
    const response = await this.submitVotingUsingPOSTRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * 새 투표 게시글 작성
   */
  async writeNewVoteUsingPOSTRaw(
    requestParameters: WriteNewVoteUsingPOSTRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<CommonResponseBodyOneVoteDto>> {
    if (
      requestParameters.voteContent === null ||
      requestParameters.voteContent === undefined
    ) {
      throw new runtime.RequiredError(
        "voteContent",
        "Required parameter requestParameters.voteContent was null or undefined when calling writeNewVoteUsingPOST."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // KarrotAccessToken authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/vote`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: VoteContentDtoToJSON(requestParameters.voteContent),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CommonResponseBodyOneVoteDtoFromJSON(jsonValue)
    );
  }

  /**
   * 새 투표 게시글 작성
   */
  async writeNewVoteUsingPOST(
    requestParameters: WriteNewVoteUsingPOSTRequest,
    initOverrides?: RequestInit
  ): Promise<CommonResponseBodyOneVoteDto> {
    const response = await this.writeNewVoteUsingPOSTRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
