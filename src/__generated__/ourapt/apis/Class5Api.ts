/* tslint:disable */
/* eslint-disable */
/**
 * 우리아파트 API 문서
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CommonResponseBodyCommentListDto,
    CommonResponseBodyCommentListDtoFromJSON,
    CommonResponseBodyCommentListDtoToJSON,
    CommonResponseBodyOneCommentDto,
    CommonResponseBodyOneCommentDtoFromJSON,
    CommonResponseBodyOneCommentDtoToJSON,
    CommonResponseBodyVoid,
    CommonResponseBodyVoidFromJSON,
    CommonResponseBodyVoidToJSON,
    WriteNewCommentDto,
    WriteNewCommentDtoFromJSON,
    WriteNewCommentDtoToJSON,
} from '../models';

export interface DeleteCommentUsingDELETERequest {
    commentId: string;
}

export interface GetCommentsOfQuestionUsingGETRequest {
    articleId: string;
}

export interface WriteNewCommentUsingPOSTRequest {
    articleId: string;
    commentContent: WriteNewCommentDto;
}

/**
 * 
 */
export class Class5Api extends runtime.BaseAPI {

    /**
     * 댓글 삭제하기
     */
    async deleteCommentUsingDELETERaw(requestParameters: DeleteCommentUsingDELETERequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CommonResponseBodyVoid>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteCommentUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // KarrotAccessToken authentication
        }

        const response = await this.request({
            path: `/api/v1/comment/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseBodyVoidFromJSON(jsonValue));
    }

    /**
     * 댓글 삭제하기
     */
    async deleteCommentUsingDELETE(requestParameters: DeleteCommentUsingDELETERequest, initOverrides?: RequestInit): Promise<CommonResponseBodyVoid> {
        const response = await this.deleteCommentUsingDELETERaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 게시글에 달린 게시글 보기
     */
    async getCommentsOfQuestionUsingGETRaw(requestParameters: GetCommentsOfQuestionUsingGETRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CommonResponseBodyCommentListDto>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling getCommentsOfQuestionUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // KarrotAccessToken authentication
        }

        const response = await this.request({
            path: `/api/v1/article/{articleId}/comments`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseBodyCommentListDtoFromJSON(jsonValue));
    }

    /**
     * 게시글에 달린 게시글 보기
     */
    async getCommentsOfQuestionUsingGET(requestParameters: GetCommentsOfQuestionUsingGETRequest, initOverrides?: RequestInit): Promise<CommonResponseBodyCommentListDto> {
        const response = await this.getCommentsOfQuestionUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 새로운 댓글 작성
     */
    async writeNewCommentUsingPOSTRaw(requestParameters: WriteNewCommentUsingPOSTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CommonResponseBodyOneCommentDto>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling writeNewCommentUsingPOST.');
        }

        if (requestParameters.commentContent === null || requestParameters.commentContent === undefined) {
            throw new runtime.RequiredError('commentContent','Required parameter requestParameters.commentContent was null or undefined when calling writeNewCommentUsingPOST.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // KarrotAccessToken authentication
        }

        const response = await this.request({
            path: `/api/v1/article/{articleId}/comment`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WriteNewCommentDtoToJSON(requestParameters.commentContent),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseBodyOneCommentDtoFromJSON(jsonValue));
    }

    /**
     * 새로운 댓글 작성
     */
    async writeNewCommentUsingPOST(requestParameters: WriteNewCommentUsingPOSTRequest, initOverrides?: RequestInit): Promise<CommonResponseBodyOneCommentDto> {
        const response = await this.writeNewCommentUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
